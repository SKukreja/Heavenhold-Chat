// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using HeavenholdBot.Models;
//
//    var heroInfo = HeroInfo.FromJson(jsonString);

namespace HeavenholdBot.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class HeroInfo
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("date_gmt")]
        public DateTimeOffset DateGmt { get; set; }

        [JsonProperty("guid")]
        public GuidClass Guid { get; set; }

        [JsonProperty("modified")]
        public DateTimeOffset Modified { get; set; }

        [JsonProperty("modified_gmt")]
        public DateTimeOffset ModifiedGmt { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("status")]
        public StatusEnum Status { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("link")]
        public Uri Link { get; set; }

        [JsonProperty("title")]
        public GuidClass Title { get; set; }

        [JsonProperty("excerpt")]
        public Excerpt Excerpt { get; set; }

        [JsonProperty("featured_media")]
        public long FeaturedMedia { get; set; }

        [JsonProperty("comment_status")]
        public Status CommentStatus { get; set; }

        [JsonProperty("ping_status")]
        public Status PingStatus { get; set; }

        [JsonProperty("template")]
        public string Template { get; set; }

        [JsonProperty("hero_categories")]
        public object[] HeroCategories { get; set; }

        [JsonProperty("acf")]
        public Acf Acf { get; set; }

        [JsonProperty("_links")]
        public Links Links { get; set; }
    }

    public partial class Acf
    {
        [JsonProperty("bio_fields")]
        public BioFields BioFields { get; set; }

        [JsonProperty("evolution_fields")]
        public EvolutionFields EvolutionFields { get; set; }

        [JsonProperty("ability_fields")]
        public AbilityFields AbilityFields { get; set; }

        [JsonProperty("stat_fields")]
        public StatFields StatFields { get; set; }

        [JsonProperty("evaluation_fields")]
        public EvaluationFields EvaluationFields { get; set; }

        [JsonProperty("analysis_fields", NullValueHandling = NullValueHandling.Ignore)]
        public AnalysisFields AnalysisFields { get; set; }

        [JsonProperty("build_guide_fields")]
        [JsonIgnore]
        public BuildGuideFields BuildGuideFields { get; set; }

        [JsonProperty("one_star_awakening_fields")]
        [JsonIgnore]
        public OneStarAwakeningFields OneStarAwakeningFields { get; set; }

        [JsonProperty("two_star_awakening_fields")]
        [JsonIgnore]
        public TwoStarAwakeningFields TwoStarAwakeningFields { get; set; }

        [JsonProperty("three_star_awakening_fields")]
        [JsonIgnore]
        public ThreeStarAwakeningFields ThreeStarAwakeningFields { get; set; }

        [JsonProperty("four_star_awakening_fields")]
        [JsonIgnore]
        public FourStarAwakeningFields FourStarAwakeningFields { get; set; }

        [JsonProperty("five_star_awakening_fields")]
        [JsonIgnore]
        public FiveStarAwakeningFields FiveStarAwakeningFields { get; set; }

        [JsonProperty("mlb_awakening_fields")]
        [JsonIgnore]
        public MlbAwakeningFields MlbAwakeningFields { get; set; }

        [JsonProperty("hero_banner")]
        [JsonIgnore]
        public HeroBanner HeroBanner { get; set; }

        [JsonProperty("arena_good_matchups", NullValueHandling = NullValueHandling.Ignore)]
        [JsonIgnore]
        public ArenaDMatchups? ArenaGoodMatchups { get; set; }

        [JsonProperty("arena_bad_matchups", NullValueHandling = NullValueHandling.Ignore)]
        [JsonIgnore]
        public ArenaDMatchups? ArenaBadMatchups { get; set; }

        [JsonProperty("colo_good_matchups", NullValueHandling = NullValueHandling.Ignore)]
        [JsonIgnore]
        public bool? ColoGoodMatchups { get; set; }

        [JsonProperty("colo_bad_matchups", NullValueHandling = NullValueHandling.Ignore)]
        [JsonIgnore]
        public bool? ColoBadMatchups { get; set; }

        [JsonProperty("synergies", NullValueHandling = NullValueHandling.Ignore)]
        [JsonIgnore]
        public bool? Synergies { get; set; }

        [JsonProperty("costumes")]
        [JsonIgnore]
        public Costumes Costumes { get; set; }

        [JsonProperty("stat_priorities", NullValueHandling = NullValueHandling.Ignore)]
        [JsonIgnore]
        public StatPriorities? StatPriorities { get; set; }

        [JsonProperty("illustration", NullValueHandling = NullValueHandling.Ignore)]
        public string Illustration { get; set; }

        [JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
        public Portrait[] Portrait { get; set; }

        [JsonProperty("rating")]
        public string Rating { get; set; }

        [JsonProperty("heal", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Heal { get; set; }

        [JsonProperty("colo_rating", NullValueHandling = NullValueHandling.Ignore)]
        public string ColoRating { get; set; }

        [JsonProperty("arena_rating", NullValueHandling = NullValueHandling.Ignore)]
        public string ArenaRating { get; set; }

        [JsonProperty("pve_rating", NullValueHandling = NullValueHandling.Ignore)]
        public string PveRating { get; set; }

        [JsonProperty("coop_rating", NullValueHandling = NullValueHandling.Ignore)]
        public string CoopRating { get; set; }

        [JsonProperty("story_rating", NullValueHandling = NullValueHandling.Ignore)]
        public string StoryRating { get; set; }

        [JsonProperty("raid_rating", NullValueHandling = NullValueHandling.Ignore)]
        public string RaidRating { get; set; }

        [JsonProperty("kamazone_rating", NullValueHandling = NullValueHandling.Ignore)]
        public string KamazoneRating { get; set; }

        [JsonProperty("orbital_rating", NullValueHandling = NullValueHandling.Ignore)]
        public string OrbitalRating { get; set; }

        [JsonProperty("tower_rating", NullValueHandling = NullValueHandling.Ignore)]
        public string TowerRating { get; set; }

        [JsonProperty("tags", NullValueHandling = NullValueHandling.Ignore)]
        public Tag[] Tags { get; set; }

        [JsonProperty("card_slot", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? CardSlot { get; set; }

        [JsonProperty("obtained_from", NullValueHandling = NullValueHandling.Ignore)]
        public ObtainedFrom? ObtainedFrom { get; set; }
    }

    public partial class AbilityFields
    {
        [JsonProperty("normal_atk_name")]
        public string NormalAtkName { get; set; }

        [JsonProperty("normal_atk_description")]
        public string NormalAtkDescription { get; set; }

        [JsonProperty("chain_state_trigger")]
        public ChainState ChainStateTrigger { get; set; }

        [JsonProperty("chain_state_result")]
        public ChainState ChainStateResult { get; set; }

        [JsonProperty("chain_skill_name")]
        public string ChainSkillName { get; set; }

        [JsonProperty("chain_skill_description")]
        public string ChainSkillDescription { get; set; }

        [JsonProperty("special_ability_name")]
        public string SpecialAbilityName { get; set; }

        [JsonProperty("special_ability_description")]
        public string SpecialAbilityDescription { get; set; }

        [JsonProperty("passives")]
        public string Passives { get; set; }
    }

    public partial class AnalysisFields
    {
        [JsonProperty("detailed_review")]
        public string DetailedReview { get; set; }

        [JsonProperty("arena_analysis")]
        public string ArenaAnalysis { get; set; }

        [JsonProperty("colosseum_analysis")]
        public string ColosseumAnalysis { get; set; }
    }

    public partial class Portrait
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("art")]
        public Uri Art { get; set; }
    }

    public partial class BioFields
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("picture")]
        public Uri Picture { get; set; }

        [JsonProperty("max_level")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MaxLevel { get; set; }

        [JsonProperty("age")]
        public string Age { get; set; }

        [JsonProperty("height")]
        public string Height { get; set; }

        [JsonProperty("weight")]
        public string Weight { get; set; }

        [JsonProperty("species")]
        public string Species { get; set; }

        [JsonProperty("rarity")]
        public string Rarity { get; set; }

        [JsonProperty("element")]
        public Element Element { get; set; }

        [JsonProperty("role")]
        public Role Role { get; set; }

        [JsonProperty("story")]
        public string Story { get; set; }

        [JsonProperty("compatible_equipment")]
        public string[] CompatibleEquipment { get; set; }

        [JsonProperty("exclusive_weapon")]
        public Costume[] ExclusiveWeapon { get; set; }

        [JsonProperty("obtained_from")]
        public bool ObtainedFrom { get; set; }

        [JsonProperty("na_release_date")]
        public string NaReleaseDate { get; set; }

        [JsonProperty("kr_release_date")]
        public string KrReleaseDate { get; set; }

        [JsonProperty("jp_release_date")]
        public string JpReleaseDate { get; set; }

    }

    public partial class Costume
    {
        [JsonProperty("ID")]
        public long Id { get; set; }

        [JsonProperty("post_author")]
        [JsonConverter(typeof(ParseStringConverter))]
        [JsonIgnore]
        public long PostAuthor { get; set; }

        [JsonProperty("post_date")]
        [JsonIgnore]
        public DateTimeOffset PostDate { get; set; }

        [JsonProperty("post_date_gmt")]
        [JsonIgnore]
        public DateTimeOffset PostDateGmt { get; set; }

        [JsonProperty("post_content")]
        [JsonIgnore]
        public string PostContent { get; set; }

        [JsonProperty("post_title")]
        public string PostTitle { get; set; }

        [JsonProperty("post_excerpt")]
        [JsonIgnore]
        public PostExcerpt PostExcerpt { get; set; }

        [JsonProperty("post_status")]
        [JsonIgnore]
        public StatusEnum PostStatus { get; set; }

        [JsonProperty("comment_status")]
        [JsonIgnore]
        public Status CommentStatus { get; set; }

        [JsonProperty("ping_status")]
        [JsonIgnore]
        public Status PingStatus { get; set; }

        [JsonProperty("post_password")]
        [JsonIgnore]
        public string PostPassword { get; set; }

        [JsonProperty("post_name")]
        [JsonIgnore]
        public string PostName { get; set; }

        [JsonProperty("to_ping")]
        [JsonIgnore]
        public string ToPing { get; set; }

        [JsonProperty("pinged")]
        [JsonIgnore]
        public string Pinged { get; set; }

        [JsonProperty("post_modified")]
        [JsonIgnore]
        public DateTimeOffset PostModified { get; set; }

        [JsonProperty("post_modified_gmt")]
        [JsonIgnore]
        public DateTimeOffset PostModifiedGmt { get; set; }

        [JsonProperty("post_content_filtered")]
        [JsonIgnore]
        public string PostContentFiltered { get; set; }

        [JsonProperty("post_parent")]
        [JsonIgnore]
        public long PostParent { get; set; }

        [JsonProperty("guid")]
        [JsonIgnore]
        public Uri Guid { get; set; }

        [JsonProperty("menu_order")]
        [JsonIgnore]
        public long MenuOrder { get; set; }

        [JsonProperty("post_type")]
        [JsonIgnore]
        public PostType PostType { get; set; }

        [JsonProperty("post_mime_type")]
        [JsonIgnore]
        public string PostMimeType { get; set; }

        [JsonProperty("comment_count")]
        [JsonConverter(typeof(ParseStringConverter))]
        [JsonIgnore]
        public long CommentCount { get; set; }

        [JsonProperty("filter")]
        [JsonIgnore]
        public Filter Filter { get; set; }
    }

    public partial class BuildGuideFields
    {
        [JsonProperty("suggested_weapons")]
        [JsonIgnore]
        public SuggestedWeapons SuggestedWeapons { get; set; }

        [JsonProperty("suggested_shield")]
        [JsonIgnore]
        public SuggestedShieldUnion SuggestedShield { get; set; }

        [JsonProperty("suggested_accessories")]
        [JsonIgnore]
        public SuggestedAccessories SuggestedAccessories { get; set; }

        [JsonProperty("suggested_merch")]
        [JsonIgnore]
        public bool SuggestedMerch { get; set; }

        [JsonProperty("suggested_cards")]
        [JsonIgnore]
        public SuggestedCards SuggestedCards { get; set; }
    }

    public partial class SuggestedAccessory
    {
        [JsonProperty("suggested_accessory")]
        public long SuggestedAccessorySuggestedAccessory { get; set; }

        [JsonProperty("accessory_explanation")]
        public string AccessoryExplanation { get; set; }
    }

    public partial class SuggestedCard
    {
        [JsonProperty("suggested_card")]
        public string SuggestedCardSuggestedCard { get; set; }

        [JsonProperty("card_explanation")]
        public string CardExplanation { get; set; }
    }

    public partial class SuggestedShieldElement
    {
        [JsonProperty("suggested_shield")]
        public long SuggestedShield { get; set; }

        [JsonProperty("shield_explanation")]
        public string ShieldExplanation { get; set; }
    }

    public partial class SuggestedWeapon
    {
        [JsonProperty("suggested_weapon")]
        public long SuggestedWeaponSuggestedWeapon { get; set; }

        [JsonProperty("weapon_explanation")]
        public string WeaponExplanation { get; set; }
    }

    public partial class EvaluationFields
    {
        [JsonProperty("colo_rating")]
        public string ColoRating { get; set; }

        [JsonProperty("arena_rating")]
        public string ArenaRating { get; set; }

        [JsonProperty("pve_rating")]
        public string PveRating { get; set; }

        [JsonProperty("story_rating")]
        public string StoryRating { get; set; }

        [JsonProperty("raid_rating")]
        public string RaidRating { get; set; }

        [JsonProperty("coop_rating")]
        public string CoopRating { get; set; }

        [JsonProperty("kamazone_rating")]
        public string KamazoneRating { get; set; }

        [JsonProperty("orbital_rating")]
        public string OrbitalRating { get; set; }

        [JsonProperty("tower_rating")]
        public string TowerRating { get; set; }

        [JsonProperty("rating")]
        public string Rating { get; set; }

        [JsonProperty("pros")]
        public string Pros { get; set; }

        [JsonProperty("cons")]
        public string Cons { get; set; }

        [JsonProperty("tags")]
        public Tag[] Tags { get; set; }

        [JsonProperty("arena_usage_frequency")]
        public string ArenaUsageFrequency { get; set; }

        [JsonProperty("colo_usage_frequency")]
        public string ColoUsageFrequency { get; set; }
    }

    public partial class EvolutionFields
    {
        [JsonProperty("evolution_1")]
        public string Evolution1 { get; set; }

        [JsonProperty("evolution_2")]
        public string Evolution2 { get; set; }

        [JsonProperty("evolution_3")]
        public string Evolution3 { get; set; }

        [JsonProperty("evolution_4")]
        public string Evolution4 { get; set; }

        [JsonProperty("evolution_5")]
        public string Evolution5 { get; set; }
    }

    public partial class FiveStarAwakeningFields
    {
        [JsonProperty("low_grade_atk_5")]
        public string LowGradeAtk5 { get; set; }

        [JsonProperty("mid_grade_atk_5")]
        public string MidGradeAtk5 { get; set; }

        [JsonProperty("high_grade_atk_5")]
        public string HighGradeAtk5 { get; set; }

        [JsonProperty("low_grade_def_5")]
        public string LowGradeDef5 { get; set; }

        [JsonProperty("mid_grade_def_5")]
        public string MidGradeDef5 { get; set; }

        [JsonProperty("high_grade_def_5")]
        public string HighGradeDef5 { get; set; }

        [JsonProperty("low_grade_hp_5")]
        public string LowGradeHp5 { get; set; }

        [JsonProperty("mid_grade_hp_5")]
        public string MidGradeHp5 { get; set; }

        [JsonProperty("high_grade_hp_5")]
        public string HighGradeHp5 { get; set; }

        [JsonProperty("low_grade_dream_5")]
        public string LowGradeDream5 { get; set; }

        [JsonProperty("mid_grade_dream_5")]
        public string MidGradeDream5 { get; set; }

        [JsonProperty("high_grade_dream_5")]
        public string HighGradeDream5 { get; set; }

        [JsonProperty("legendary_awakening_5")]
        public string LegendaryAwakening5 { get; set; }

        [JsonProperty("gold")]
        public string Gold { get; set; }
    }

    public partial class FourStarAwakeningFields
    {
        [JsonProperty("low_grade_atk_4")]
        public string LowGradeAtk4 { get; set; }

        [JsonProperty("mid_grade_atk_4")]
        public string MidGradeAtk4 { get; set; }

        [JsonProperty("high_grade_atk_4")]
        public string HighGradeAtk4 { get; set; }

        [JsonProperty("low_grade_def_4")]
        public string LowGradeDef4 { get; set; }

        [JsonProperty("mid_grade_def_4")]
        public string MidGradeDef4 { get; set; }

        [JsonProperty("high_grade_def_4")]
        public string HighGradeDef4 { get; set; }

        [JsonProperty("low_grade_hp_4")]
        public string LowGradeHp4 { get; set; }

        [JsonProperty("mid_grade_hp_4")]
        public string MidGradeHp4 { get; set; }

        [JsonProperty("high_grade_hp_4")]
        public string HighGradeHp4 { get; set; }

        [JsonProperty("low_grade_dream_4")]
        public string LowGradeDream4 { get; set; }

        [JsonProperty("mid_grade_dream_4")]
        public string MidGradeDream4 { get; set; }

        [JsonProperty("high_grade_dream_4")]
        public string HighGradeDream4 { get; set; }

        [JsonProperty("legendary_awakening_4")]
        public string LegendaryAwakening4 { get; set; }

        [JsonProperty("gold")]
        public string Gold { get; set; }
    }

    public partial class MlbAwakeningFields
    {
        [JsonProperty("low_grade_atk_mlb")]
        public string LowGradeAtkMlb { get; set; }

        [JsonProperty("mid_grade_atk_mlb")]
        public string MidGradeAtkMlb { get; set; }

        [JsonProperty("high_grade_atk_mlb")]
        public string HighGradeAtkMlb { get; set; }

        [JsonProperty("low_grade_def_mlb")]
        public string LowGradeDefMlb { get; set; }

        [JsonProperty("mid_grade_def_mlb")]
        public string MidGradeDefMlb { get; set; }

        [JsonProperty("high_grade_def_mlb")]
        public string HighGradeDefMlb { get; set; }

        [JsonProperty("low_grade_hp_mlb")]
        public string LowGradeHpMlb { get; set; }

        [JsonProperty("mid_grade_hp_mlb")]
        public string MidGradeHpMlb { get; set; }

        [JsonProperty("high_grade_hp_mlb")]
        public string HighGradeHpMlb { get; set; }

        [JsonProperty("low_grade_dream_mlb")]
        public string LowGradeDreamMlb { get; set; }

        [JsonProperty("mid_grade_dream_mlb")]
        public string MidGradeDreamMlb { get; set; }

        [JsonProperty("high_grade_dream_mlb")]
        public string HighGradeDreamMlb { get; set; }

        [JsonProperty("legendary_awakening_mlb")]
        public string LegendaryAwakeningMlb { get; set; }

        [JsonProperty("gold")]
        public string Gold { get; set; }
    }

    public partial class OneStarAwakeningFields
    {
        [JsonProperty("low_grade_atk_1")]
        public string LowGradeAtk1 { get; set; }

        [JsonProperty("mid_grade_atk_1")]
        public string MidGradeAtk1 { get; set; }

        [JsonProperty("high_grade_atk_1")]
        public string HighGradeAtk1 { get; set; }

        [JsonProperty("low_grade_def_1")]
        public string LowGradeDef1 { get; set; }

        [JsonProperty("mid_grade_def_1")]
        public string MidGradeDef1 { get; set; }

        [JsonProperty("high_grade_def_1")]
        public string HighGradeDef1 { get; set; }

        [JsonProperty("low_grade_hp_1")]
        public string LowGradeHp1 { get; set; }

        [JsonProperty("mid_grade_hp_1")]
        public string MidGradeHp1 { get; set; }

        [JsonProperty("high_grade_hp_1")]
        public string HighGradeHp1 { get; set; }

        [JsonProperty("low_grade_dream_1")]
        public string LowGradeDream1 { get; set; }

        [JsonProperty("mid_grade_dream_1")]
        public string MidGradeDream1 { get; set; }

        [JsonProperty("high_grade_dream_1")]
        public string HighGradeDream1 { get; set; }

        [JsonProperty("legendary_awakening_1")]
        public string LegendaryAwakening1 { get; set; }

        [JsonProperty("gold")]
        public string Gold { get; set; }
    }

    public partial class StatFields
    {
        [JsonProperty("atk")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Atk { get; set; }

        [JsonProperty("hp")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Hp { get; set; }

        [JsonProperty("def")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Def { get; set; }

        [JsonProperty("crit")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Crit { get; set; }

        [JsonProperty("damage_reduction")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DamageReduction { get; set; }

        [JsonProperty("heal")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Heal { get; set; }

        [JsonProperty("basic_resistance")]
        public string BasicResistance { get; set; }

        [JsonProperty("light_resistance")]
        public string LightResistance { get; set; }

        [JsonProperty("dark_resistance")]
        public string DarkResistance { get; set; }

        [JsonProperty("fire_resistance")]
        public string FireResistance { get; set; }

        [JsonProperty("earth_resistance")]
        public string EarthResistance { get; set; }

        [JsonProperty("water_resistance")]
        public string WaterResistance { get; set; }

        [JsonProperty("card_slot")]
        public string CardSlot { get; set; }
    }

    public partial class StatPriority
    {
        [JsonProperty("build_name")]
        public string BuildName { get; set; }

        [JsonProperty("stat_priority")]
        [JsonIgnore]
        public Costume[] StatPriorityStatPriority { get; set; }

        [JsonProperty("explanation")]
        public string Explanation { get; set; }
    }

    public partial class ThreeStarAwakeningFields
    {
        [JsonProperty("low_grade_atk_3")]
        public string LowGradeAtk3 { get; set; }

        [JsonProperty("mid_grade_atk_3")]
        public string MidGradeAtk3 { get; set; }

        [JsonProperty("high_grade_atk_3")]
        public string HighGradeAtk3 { get; set; }

        [JsonProperty("low_grade_def_3")]
        public string LowGradeDef3 { get; set; }

        [JsonProperty("mid_grade_def_3")]
        public string MidGradeDef3 { get; set; }

        [JsonProperty("high_grade_def_3")]
        public string HighGradeDef3 { get; set; }

        [JsonProperty("low_grade_hp_3")]
        public string LowGradeHp3 { get; set; }

        [JsonProperty("mid_grade_hp_3")]
        public string MidGradeHp3 { get; set; }

        [JsonProperty("high_grade_hp_3")]
        public string HighGradeHp3 { get; set; }

        [JsonProperty("low_grade_dream_3")]
        public string LowGradeDream3 { get; set; }

        [JsonProperty("mid_grade_dream_3")]
        public string MidGradeDream3 { get; set; }

        [JsonProperty("high_grade_dream_3")]
        public string HighGradeDream3 { get; set; }

        [JsonProperty("legendary_awakening_3")]
        public string LegendaryAwakening3 { get; set; }

        [JsonProperty("gold")]
        public string Gold { get; set; }
    }

    public partial class TwoStarAwakeningFields
    {
        [JsonProperty("low_grade_atk_2")]
        public string LowGradeAtk2 { get; set; }

        [JsonProperty("mid_grade_atk_2")]
        public string MidGradeAtk2 { get; set; }

        [JsonProperty("high_grade_atk_2")]
        public string HighGradeAtk2 { get; set; }

        [JsonProperty("low_grade_def_2")]
        public string LowGradeDef2 { get; set; }

        [JsonProperty("mid_grade_def_2")]
        public string MidGradeDef2 { get; set; }

        [JsonProperty("high_grade_def_2")]
        public string HighGradeDef2 { get; set; }

        [JsonProperty("low_grade_hp_2")]
        public string LowGradeHp2 { get; set; }

        [JsonProperty("mid_grade_hp_2")]
        public string MidGradeHp2 { get; set; }

        [JsonProperty("high_grade_hp_2")]
        public string HighGradeHp2 { get; set; }

        [JsonProperty("low_grade_dream_2")]
        public string LowGradeDream2 { get; set; }

        [JsonProperty("mid_grade_dream_2")]
        public string MidGradeDream2 { get; set; }

        [JsonProperty("high_grade_dream_2")]
        public string HighGradeDream2 { get; set; }

        [JsonProperty("legendary_awakening_2")]
        public string LegendaryAwakening2 { get; set; }

        [JsonProperty("gold")]
        public string Gold { get; set; }
    }

    public partial class Excerpt
    {
        [JsonProperty("rendered")]
        public string Rendered { get; set; }

        [JsonProperty("protected")]
        public bool Protected { get; set; }
    }

    public partial class GuidClass
    {
        [JsonProperty("rendered")]
        public string Rendered { get; set; }
    }

    public partial class Links
    {
        [JsonProperty("self")]
        public About[] Self { get; set; }

        [JsonProperty("collection")]
        public About[] Collection { get; set; }

        [JsonProperty("about")]
        public About[] About { get; set; }

        [JsonProperty("replies")]
        public Reply[] Replies { get; set; }

        [JsonProperty("version-history")]
        public VersionHistory[] VersionHistory { get; set; }

        [JsonProperty("predecessor-version")]
        public PredecessorVersion[] PredecessorVersion { get; set; }

        [JsonProperty("wp:featuredmedia")]
        public Reply[] WpFeaturedmedia { get; set; }

        [JsonProperty("wp:attachment")]
        public About[] WpAttachment { get; set; }

        [JsonProperty("wp:term")]
        public WpTerm[] WpTerm { get; set; }

        [JsonProperty("curies")]
        public Cury[] Curies { get; set; }
    }

    public partial class About
    {
        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public partial class Cury
    {
        [JsonProperty("name")]
        public Name Name { get; set; }

        [JsonProperty("href")]
        public string Href { get; set; }

        [JsonProperty("templated")]
        public bool Templated { get; set; }
    }

    public partial class PredecessorVersion
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public partial class Reply
    {
        [JsonProperty("embeddable")]
        public bool Embeddable { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public partial class VersionHistory
    {
        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public partial class WpTerm
    {
        [JsonProperty("taxonomy")]
        [JsonIgnore]
        public Taxonomy Taxonomy { get; set; }

        [JsonProperty("embeddable")]
        public bool Embeddable { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public enum ChainState { Airborne, All, Downed, Injured, None };

    public enum AgeEnum { Empty };

    public enum CompatibleEquipment { Accessory, Basket, Bow, Claw, Gauntlet, OneHandedSword, Rifle, Shield, Staff, TwoHandedSword };

    public enum Element { Basic, Dark, Earth, Fire, Light, Water };

    public enum Status { Closed, Open };

    public enum Filter { Raw };

    public enum PostExcerpt { D, Empty, PostExcerpt, Prominence };

    public enum StatusEnum { Publish };

    public enum PostType { Banners, Items, Post };

    public enum Rarity { The1Star, The2Star, The3Star };

    public enum Role { Ranged, Support, Tanker, Warrior };

    public enum CoopRatingEnum { Empty, The55, The65, The75, The85, The95 };

    public enum Tag { Bruiser, Chaser, Debuffer, Dps, Healer, Support, Tank };

    public enum Href { HttpsApiWOrgRel };

    public enum Name { Wp };

    public enum Taxonomy { HeroCategories };

    public enum TypeEnum { Heroes };

    public partial struct ArenaDMatchups
    {
        public long[] IntegerArray;
        public string String;

        public static implicit operator ArenaDMatchups(long[] IntegerArray) => new ArenaDMatchups { IntegerArray = IntegerArray };
        public static implicit operator ArenaDMatchups(string String) => new ArenaDMatchups { String = String };
    }

    public partial struct AgeUnion
    {
        public AgeEnum? Enum;
        public long? Integer;

        public static implicit operator AgeUnion(AgeEnum Enum) => new AgeUnion { Enum = Enum };
        public static implicit operator AgeUnion(long Integer) => new AgeUnion { Integer = Integer };
    }

    public partial struct Costumes
    {
        public Costume[] CostumeArray;
        public string String;

        public static implicit operator Costumes(Costume[] CostumeArray) => new Costumes { CostumeArray = CostumeArray };
        public static implicit operator Costumes(string String) => new Costumes { String = String };
    }

    public partial struct SuggestedAccessories
    {
        public bool? Bool;
        public SuggestedAccessory[] SuggestedAccessoryArray;

        public static implicit operator SuggestedAccessories(bool Bool) => new SuggestedAccessories { Bool = Bool };
        public static implicit operator SuggestedAccessories(SuggestedAccessory[] SuggestedAccessoryArray) => new SuggestedAccessories { SuggestedAccessoryArray = SuggestedAccessoryArray };
    }

    public partial struct SuggestedCards
    {
        public bool? Bool;
        public SuggestedCard[] SuggestedCardArray;

        public static implicit operator SuggestedCards(bool Bool) => new SuggestedCards { Bool = Bool };
        public static implicit operator SuggestedCards(SuggestedCard[] SuggestedCardArray) => new SuggestedCards { SuggestedCardArray = SuggestedCardArray };
    }

    public partial struct SuggestedShieldUnion
    {
        public bool? Bool;
        public SuggestedShieldElement[] SuggestedShieldElementArray;

        public static implicit operator SuggestedShieldUnion(bool Bool) => new SuggestedShieldUnion { Bool = Bool };
        public static implicit operator SuggestedShieldUnion(SuggestedShieldElement[] SuggestedShieldElementArray) => new SuggestedShieldUnion { SuggestedShieldElementArray = SuggestedShieldElementArray };
    }

    public partial struct SuggestedWeapons
    {
        public bool? Bool;
        public SuggestedWeapon[] SuggestedWeaponArray;

        public static implicit operator SuggestedWeapons(bool Bool) => new SuggestedWeapons { Bool = Bool };
        public static implicit operator SuggestedWeapons(SuggestedWeapon[] SuggestedWeaponArray) => new SuggestedWeapons { SuggestedWeaponArray = SuggestedWeaponArray };
    }

    public partial struct CoopRatingUnion
    {
        public CoopRatingEnum? Enum;
        public long? Integer;

        public static implicit operator CoopRatingUnion(CoopRatingEnum Enum) => new CoopRatingUnion { Enum = Enum };
        public static implicit operator CoopRatingUnion(long Integer) => new CoopRatingUnion { Integer = Integer };
    }

    public partial struct Evolution1
    {
        public bool? Bool;
        public Uri PurpleUri;

        public static implicit operator Evolution1(bool Bool) => new Evolution1 { Bool = Bool };
        public static implicit operator Evolution1(Uri PurpleUri) => new Evolution1 { PurpleUri = PurpleUri };
    }

    public partial struct Evolution2
    {
        public bool? Bool;
        public Uri PurpleUri;

        public static implicit operator Evolution2(bool Bool) => new Evolution2 { Bool = Bool };
        public static implicit operator Evolution2(Uri PurpleUri) => new Evolution2 { PurpleUri = PurpleUri };
    }

    public partial struct HeroBanner
    {
        public bool? Bool;
        public Costume[] CostumeArray;

        public static implicit operator HeroBanner(bool Bool) => new HeroBanner { Bool = Bool };
        public static implicit operator HeroBanner(Costume[] CostumeArray) => new HeroBanner { CostumeArray = CostumeArray };
    }

    public partial struct Illustration
    {
        public bool? Bool;
        public Uri PurpleUri;

        public static implicit operator Illustration(bool Bool) => new Illustration { Bool = Bool };
        public static implicit operator Illustration(Uri PurpleUri) => new Illustration { PurpleUri = PurpleUri };
    }

    public partial struct ObtainedFrom
    {
        public bool? Bool;
        public long? Integer;

        public static implicit operator ObtainedFrom(bool Bool) => new ObtainedFrom { Bool = Bool };
        public static implicit operator ObtainedFrom(long Integer) => new ObtainedFrom { Integer = Integer };
    }

    public partial struct StatPriorities
    {
        public bool? Bool;
        public StatPriority[] StatPriorityArray;

        public static implicit operator StatPriorities(bool Bool) => new StatPriorities { Bool = Bool };
        public static implicit operator StatPriorities(StatPriority[] StatPriorityArray) => new StatPriorities { StatPriorityArray = StatPriorityArray };
    }

    public partial class HeroInfo
    {
        public static HeroInfo[] FromJson(string json) => JsonConvert.DeserializeObject<HeroInfo[]>(json, HeavenholdBot.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this HeroInfo[] self) => JsonConvert.SerializeObject(self, HeavenholdBot.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                HrefConverter.Singleton,
                NameConverter.Singleton,
                TaxonomyConverter.Singleton,
                ChainStateConverter.Singleton,
                ArenaDMatchupsConverter.Singleton,
                AgeUnionConverter.Singleton,
                AgeEnumConverter.Singleton,
                CompatibleEquipmentConverter.Singleton,
                ElementConverter.Singleton,
                CostumesConverter.Singleton,
                StatusConverter.Singleton,
                FilterConverter.Singleton,
                PostExcerptConverter.Singleton,
                StatusEnumConverter.Singleton,
                PostTypeConverter.Singleton,
                RarityConverter.Singleton,
                RoleConverter.Singleton,
                SuggestedAccessoriesConverter.Singleton,
                SuggestedCardsConverter.Singleton,
                SuggestedShieldUnionConverter.Singleton,
                SuggestedWeaponsConverter.Singleton,
                CoopRatingUnionConverter.Singleton,
                CoopRatingEnumConverter.Singleton,
                TagConverter.Singleton,
                Evolution1Converter.Singleton,
                Evolution2Converter.Singleton,
                HeroBannerConverter.Singleton,
                IllustrationConverter.Singleton,
                ObtainedFromConverter.Singleton,
                StatPrioritiesConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class HrefConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Href) || t == typeof(Href?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "https://api.w.org/{rel}")
            {
                return Href.HttpsApiWOrgRel;
            }
            throw new Exception("Cannot unmarshal type Href");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Href)untypedValue;
            if (value == Href.HttpsApiWOrgRel)
            {
                serializer.Serialize(writer, "https://api.w.org/{rel}");
                return;
            }
            throw new Exception("Cannot marshal type Href");
        }

        public static readonly HrefConverter Singleton = new HrefConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "wp")
            {
                return Name.Wp;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            if (value == Name.Wp)
            {
                serializer.Serialize(writer, "wp");
                return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class TaxonomyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Taxonomy) || t == typeof(Taxonomy?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "hero_categories")
            {
                return Taxonomy.HeroCategories;
            }
            throw new Exception("Cannot unmarshal type Taxonomy");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Taxonomy)untypedValue;
            if (value == Taxonomy.HeroCategories)
            {
                serializer.Serialize(writer, "hero_categories");
                return;
            }
            throw new Exception("Cannot marshal type Taxonomy");
        }

        public static readonly TaxonomyConverter Singleton = new TaxonomyConverter();
    }

    internal class ChainStateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ChainState) || t == typeof(ChainState?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Airborne":
                    return ChainState.Airborne;
                case "All":
                    return ChainState.All;
                case "Downed":
                    return ChainState.Downed;
                case "Injured":
                    return ChainState.Injured;
                case "None":
                    return ChainState.None;
            }
            throw new Exception("Cannot unmarshal type ChainState");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ChainState)untypedValue;
            switch (value)
            {
                case ChainState.Airborne:
                    serializer.Serialize(writer, "Airborne");
                    return;
                case ChainState.All:
                    serializer.Serialize(writer, "All");
                    return;
                case ChainState.Downed:
                    serializer.Serialize(writer, "Downed");
                    return;
                case ChainState.Injured:
                    serializer.Serialize(writer, "Injured");
                    return;
                case ChainState.None:
                    serializer.Serialize(writer, "None");
                    return;
            }
            throw new Exception("Cannot marshal type ChainState");
        }

        public static readonly ChainStateConverter Singleton = new ChainStateConverter();
    }

    internal class ArenaDMatchupsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ArenaDMatchups) || t == typeof(ArenaDMatchups?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ArenaDMatchups { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<long[]>(reader);
                    return new ArenaDMatchups { IntegerArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ArenaDMatchups");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ArenaDMatchups)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.IntegerArray != null)
            {
                serializer.Serialize(writer, value.IntegerArray);
                return;
            }
            throw new Exception("Cannot marshal type ArenaDMatchups");
        }

        public static readonly ArenaDMatchupsConverter Singleton = new ArenaDMatchupsConverter();
    }

    internal class AgeUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AgeUnion) || t == typeof(AgeUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    if (stringValue == "?")
                    {
                        return new AgeUnion { Enum = AgeEnum.Empty };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new AgeUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type AgeUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AgeUnion)untypedValue;
            if (value.Enum != null)
            {
                if (value.Enum == AgeEnum.Empty)
                {
                    serializer.Serialize(writer, "?");
                    return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type AgeUnion");
        }

        public static readonly AgeUnionConverter Singleton = new AgeUnionConverter();
    }

    internal class AgeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AgeEnum) || t == typeof(AgeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "?")
            {
                return AgeEnum.Empty;
            }
            throw new Exception("Cannot unmarshal type AgeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AgeEnum)untypedValue;
            if (value == AgeEnum.Empty)
            {
                serializer.Serialize(writer, "?");
                return;
            }
            throw new Exception("Cannot marshal type AgeEnum");
        }

        public static readonly AgeEnumConverter Singleton = new AgeEnumConverter();
    }

    internal class CompatibleEquipmentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CompatibleEquipment) || t == typeof(CompatibleEquipment?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Accessory":
                    return CompatibleEquipment.Accessory;
                case "Basket":
                    return CompatibleEquipment.Basket;
                case "Bow":
                    return CompatibleEquipment.Bow;
                case "Claw":
                    return CompatibleEquipment.Claw;
                case "Gauntlet":
                    return CompatibleEquipment.Gauntlet;
                case "One-Handed Sword":
                    return CompatibleEquipment.OneHandedSword;
                case "Rifle":
                    return CompatibleEquipment.Rifle;
                case "Shield":
                    return CompatibleEquipment.Shield;
                case "Staff":
                    return CompatibleEquipment.Staff;
                case "Two-Handed Sword":
                    return CompatibleEquipment.TwoHandedSword;
            }
            throw new Exception("Cannot unmarshal type CompatibleEquipment");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CompatibleEquipment)untypedValue;
            switch (value)
            {
                case CompatibleEquipment.Accessory:
                    serializer.Serialize(writer, "Accessory");
                    return;
                case CompatibleEquipment.Basket:
                    serializer.Serialize(writer, "Basket");
                    return;
                case CompatibleEquipment.Bow:
                    serializer.Serialize(writer, "Bow");
                    return;
                case CompatibleEquipment.Claw:
                    serializer.Serialize(writer, "Claw");
                    return;
                case CompatibleEquipment.Gauntlet:
                    serializer.Serialize(writer, "Gauntlet");
                    return;
                case CompatibleEquipment.OneHandedSword:
                    serializer.Serialize(writer, "One-Handed Sword");
                    return;
                case CompatibleEquipment.Rifle:
                    serializer.Serialize(writer, "Rifle");
                    return;
                case CompatibleEquipment.Shield:
                    serializer.Serialize(writer, "Shield");
                    return;
                case CompatibleEquipment.Staff:
                    serializer.Serialize(writer, "Staff");
                    return;
                case CompatibleEquipment.TwoHandedSword:
                    serializer.Serialize(writer, "Two-Handed Sword");
                    return;
            }
            throw new Exception("Cannot marshal type CompatibleEquipment");
        }

        public static readonly CompatibleEquipmentConverter Singleton = new CompatibleEquipmentConverter();
    }

    internal class ElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Element) || t == typeof(Element?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Basic":
                    return Element.Basic;
                case "Dark":
                    return Element.Dark;
                case "Earth":
                    return Element.Earth;
                case "Fire":
                    return Element.Fire;
                case "Light":
                    return Element.Light;
                case "Water":
                    return Element.Water;
            }
            throw new Exception("Cannot unmarshal type Element");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Element)untypedValue;
            switch (value)
            {
                case Element.Basic:
                    serializer.Serialize(writer, "Basic");
                    return;
                case Element.Dark:
                    serializer.Serialize(writer, "Dark");
                    return;
                case Element.Earth:
                    serializer.Serialize(writer, "Earth");
                    return;
                case Element.Fire:
                    serializer.Serialize(writer, "Fire");
                    return;
                case Element.Light:
                    serializer.Serialize(writer, "Light");
                    return;
                case Element.Water:
                    serializer.Serialize(writer, "Water");
                    return;
            }
            throw new Exception("Cannot marshal type Element");
        }

        public static readonly ElementConverter Singleton = new ElementConverter();
    }

    internal class CostumesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Costumes) || t == typeof(Costumes?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Costumes { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<Costume[]>(reader);
                    return new Costumes { CostumeArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Costumes");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Costumes)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.CostumeArray != null)
            {
                serializer.Serialize(writer, value.CostumeArray);
                return;
            }
            throw new Exception("Cannot marshal type Costumes");
        }

        public static readonly CostumesConverter Singleton = new CostumesConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class StatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Status) || t == typeof(Status?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "closed":
                    return Status.Closed;
                case "open":
                    return Status.Open;
            }
            throw new Exception("Cannot unmarshal type Status");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Status)untypedValue;
            switch (value)
            {
                case Status.Closed:
                    serializer.Serialize(writer, "closed");
                    return;
                case Status.Open:
                    serializer.Serialize(writer, "open");
                    return;
            }
            throw new Exception("Cannot marshal type Status");
        }

        public static readonly StatusConverter Singleton = new StatusConverter();
    }

    internal class FilterConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Filter) || t == typeof(Filter?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "raw")
            {
                return Filter.Raw;
            }
            throw new Exception("Cannot unmarshal type Filter");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Filter)untypedValue;
            if (value == Filter.Raw)
            {
                serializer.Serialize(writer, "raw");
                return;
            }
            throw new Exception("Cannot marshal type Filter");
        }

        public static readonly FilterConverter Singleton = new FilterConverter();
    }

    internal class PostExcerptConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PostExcerpt) || t == typeof(PostExcerpt?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return PostExcerpt.Empty;
                case " ":
                    return PostExcerpt.PostExcerpt;
                case "D":
                    return PostExcerpt.D;
                case "Prominence":
                    return PostExcerpt.Prominence;
            }
            throw new Exception("Cannot unmarshal type PostExcerpt");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PostExcerpt)untypedValue;
            switch (value)
            {
                case PostExcerpt.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case PostExcerpt.PostExcerpt:
                    serializer.Serialize(writer, " ");
                    return;
                case PostExcerpt.D:
                    serializer.Serialize(writer, "D");
                    return;
                case PostExcerpt.Prominence:
                    serializer.Serialize(writer, "Prominence");
                    return;
            }
            throw new Exception("Cannot marshal type PostExcerpt");
        }

        public static readonly PostExcerptConverter Singleton = new PostExcerptConverter();
    }

    internal class StatusEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StatusEnum) || t == typeof(StatusEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "publish")
            {
                return StatusEnum.Publish;
            }
            throw new Exception("Cannot unmarshal type StatusEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StatusEnum)untypedValue;
            if (value == StatusEnum.Publish)
            {
                serializer.Serialize(writer, "publish");
                return;
            }
            throw new Exception("Cannot marshal type StatusEnum");
        }

        public static readonly StatusEnumConverter Singleton = new StatusEnumConverter();
    }

    internal class PostTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PostType) || t == typeof(PostType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "banners":
                    return PostType.Banners;
                case "items":
                    return PostType.Items;
                case "post":
                    return PostType.Post;
            }
            throw new Exception("Cannot unmarshal type PostType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PostType)untypedValue;
            switch (value)
            {
                case PostType.Banners:
                    serializer.Serialize(writer, "banners");
                    return;
                case PostType.Items:
                    serializer.Serialize(writer, "items");
                    return;
                case PostType.Post:
                    serializer.Serialize(writer, "post");
                    return;
            }
            throw new Exception("Cannot marshal type PostType");
        }

        public static readonly PostTypeConverter Singleton = new PostTypeConverter();
    }

    internal class RarityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rarity) || t == typeof(Rarity?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1 Star":
                    return Rarity.The1Star;
                case "2 Star":
                    return Rarity.The2Star;
                case "3 Star":
                    return Rarity.The3Star;
            }
            throw new Exception("Cannot unmarshal type Rarity");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rarity)untypedValue;
            switch (value)
            {
                case Rarity.The1Star:
                    serializer.Serialize(writer, "1 Star");
                    return;
                case Rarity.The2Star:
                    serializer.Serialize(writer, "2 Star");
                    return;
                case Rarity.The3Star:
                    serializer.Serialize(writer, "3 Star");
                    return;
            }
            throw new Exception("Cannot marshal type Rarity");
        }

        public static readonly RarityConverter Singleton = new RarityConverter();
    }

    internal class RoleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Role) || t == typeof(Role?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Ranged":
                    return Role.Ranged;
                case "Support":
                    return Role.Support;
                case "Tanker":
                    return Role.Tanker;
                case "Warrior":
                    return Role.Warrior;
            }
            throw new Exception("Cannot unmarshal type Role");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Role)untypedValue;
            switch (value)
            {
                case Role.Ranged:
                    serializer.Serialize(writer, "Ranged");
                    return;
                case Role.Support:
                    serializer.Serialize(writer, "Support");
                    return;
                case Role.Tanker:
                    serializer.Serialize(writer, "Tanker");
                    return;
                case Role.Warrior:
                    serializer.Serialize(writer, "Warrior");
                    return;
            }
            throw new Exception("Cannot marshal type Role");
        }

        public static readonly RoleConverter Singleton = new RoleConverter();
    }

    internal class SuggestedAccessoriesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SuggestedAccessories) || t == typeof(SuggestedAccessories?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new SuggestedAccessories { Bool = boolValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<SuggestedAccessory[]>(reader);
                    return new SuggestedAccessories { SuggestedAccessoryArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type SuggestedAccessories");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SuggestedAccessories)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.SuggestedAccessoryArray != null)
            {
                serializer.Serialize(writer, value.SuggestedAccessoryArray);
                return;
            }
            throw new Exception("Cannot marshal type SuggestedAccessories");
        }

        public static readonly SuggestedAccessoriesConverter Singleton = new SuggestedAccessoriesConverter();
    }

    internal class SuggestedCardsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SuggestedCards) || t == typeof(SuggestedCards?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new SuggestedCards { Bool = boolValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<SuggestedCard[]>(reader);
                    return new SuggestedCards { SuggestedCardArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type SuggestedCards");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SuggestedCards)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.SuggestedCardArray != null)
            {
                serializer.Serialize(writer, value.SuggestedCardArray);
                return;
            }
            throw new Exception("Cannot marshal type SuggestedCards");
        }

        public static readonly SuggestedCardsConverter Singleton = new SuggestedCardsConverter();
    }

    internal class SuggestedShieldUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SuggestedShieldUnion) || t == typeof(SuggestedShieldUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new SuggestedShieldUnion { Bool = boolValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<SuggestedShieldElement[]>(reader);
                    return new SuggestedShieldUnion { SuggestedShieldElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type SuggestedShieldUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SuggestedShieldUnion)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.SuggestedShieldElementArray != null)
            {
                serializer.Serialize(writer, value.SuggestedShieldElementArray);
                return;
            }
            throw new Exception("Cannot marshal type SuggestedShieldUnion");
        }

        public static readonly SuggestedShieldUnionConverter Singleton = new SuggestedShieldUnionConverter();
    }

    internal class SuggestedWeaponsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SuggestedWeapons) || t == typeof(SuggestedWeapons?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new SuggestedWeapons { Bool = boolValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<SuggestedWeapon[]>(reader);
                    return new SuggestedWeapons { SuggestedWeaponArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type SuggestedWeapons");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SuggestedWeapons)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.SuggestedWeaponArray != null)
            {
                serializer.Serialize(writer, value.SuggestedWeaponArray);
                return;
            }
            throw new Exception("Cannot marshal type SuggestedWeapons");
        }

        public static readonly SuggestedWeaponsConverter Singleton = new SuggestedWeaponsConverter();
    }

    internal class CoopRatingUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CoopRatingUnion) || t == typeof(CoopRatingUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "":
                            return new CoopRatingUnion { Enum = CoopRatingEnum.Empty };
                        case "5.5":
                            return new CoopRatingUnion { Enum = CoopRatingEnum.The55 };
                        case "6.5":
                            return new CoopRatingUnion { Enum = CoopRatingEnum.The65 };
                        case "7.5":
                            return new CoopRatingUnion { Enum = CoopRatingEnum.The75 };
                        case "8.5":
                            return new CoopRatingUnion { Enum = CoopRatingEnum.The85 };
                        case "9.5":
                            return new CoopRatingUnion { Enum = CoopRatingEnum.The95 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new CoopRatingUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type CoopRatingUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CoopRatingUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case CoopRatingEnum.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case CoopRatingEnum.The55:
                        serializer.Serialize(writer, "5.5");
                        return;
                    case CoopRatingEnum.The65:
                        serializer.Serialize(writer, "6.5");
                        return;
                    case CoopRatingEnum.The75:
                        serializer.Serialize(writer, "7.5");
                        return;
                    case CoopRatingEnum.The85:
                        serializer.Serialize(writer, "8.5");
                        return;
                    case CoopRatingEnum.The95:
                        serializer.Serialize(writer, "9.5");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type CoopRatingUnion");
        }

        public static readonly CoopRatingUnionConverter Singleton = new CoopRatingUnionConverter();
    }

    internal class CoopRatingEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CoopRatingEnum) || t == typeof(CoopRatingEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return CoopRatingEnum.Empty;
                case "5.5":
                    return CoopRatingEnum.The55;
                case "6.5":
                    return CoopRatingEnum.The65;
                case "7.5":
                    return CoopRatingEnum.The75;
                case "8.5":
                    return CoopRatingEnum.The85;
                case "9.5":
                    return CoopRatingEnum.The95;
            }
            throw new Exception("Cannot unmarshal type CoopRatingEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CoopRatingEnum)untypedValue;
            switch (value)
            {
                case CoopRatingEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case CoopRatingEnum.The55:
                    serializer.Serialize(writer, "5.5");
                    return;
                case CoopRatingEnum.The65:
                    serializer.Serialize(writer, "6.5");
                    return;
                case CoopRatingEnum.The75:
                    serializer.Serialize(writer, "7.5");
                    return;
                case CoopRatingEnum.The85:
                    serializer.Serialize(writer, "8.5");
                    return;
                case CoopRatingEnum.The95:
                    serializer.Serialize(writer, "9.5");
                    return;
            }
            throw new Exception("Cannot marshal type CoopRatingEnum");
        }

        public static readonly CoopRatingEnumConverter Singleton = new CoopRatingEnumConverter();
    }

    internal class TagConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Tag) || t == typeof(Tag?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Bruiser":
                    return Tag.Bruiser;
                case "Chaser":
                    return Tag.Chaser;
                case "DPS":
                    return Tag.Dps;
                case "Debuffer":
                    return Tag.Debuffer;
                case "Healer":
                    return Tag.Healer;
                case "Support":
                    return Tag.Support;
                case "Tank":
                    return Tag.Tank;
            }
            throw new Exception("Cannot unmarshal type Tag");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Tag)untypedValue;
            switch (value)
            {
                case Tag.Bruiser:
                    serializer.Serialize(writer, "Bruiser");
                    return;
                case Tag.Chaser:
                    serializer.Serialize(writer, "Chaser");
                    return;
                case Tag.Dps:
                    serializer.Serialize(writer, "DPS");
                    return;
                case Tag.Debuffer:
                    serializer.Serialize(writer, "Debuffer");
                    return;
                case Tag.Healer:
                    serializer.Serialize(writer, "Healer");
                    return;
                case Tag.Support:
                    serializer.Serialize(writer, "Support");
                    return;
                case Tag.Tank:
                    serializer.Serialize(writer, "Tank");
                    return;
            }
            throw new Exception("Cannot marshal type Tag");
        }

        public static readonly TagConverter Singleton = new TagConverter();
    }

    internal class Evolution1Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Evolution1) || t == typeof(Evolution1?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new Evolution1 { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new Evolution1 { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
            }
            throw new Exception("Cannot unmarshal type Evolution1");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Evolution1)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            throw new Exception("Cannot marshal type Evolution1");
        }

        public static readonly Evolution1Converter Singleton = new Evolution1Converter();
    }

    internal class Evolution2Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Evolution2) || t == typeof(Evolution2?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new Evolution2 { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new Evolution2 { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
            }
            throw new Exception("Cannot unmarshal type Evolution2");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Evolution2)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            throw new Exception("Cannot marshal type Evolution2");
        }

        public static readonly Evolution2Converter Singleton = new Evolution2Converter();
    }

    internal class HeroBannerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HeroBanner) || t == typeof(HeroBanner?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new HeroBanner { Bool = boolValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<Costume[]>(reader);
                    return new HeroBanner { CostumeArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type HeroBanner");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (HeroBanner)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.CostumeArray != null)
            {
                serializer.Serialize(writer, value.CostumeArray);
                return;
            }
            throw new Exception("Cannot marshal type HeroBanner");
        }

        public static readonly HeroBannerConverter Singleton = new HeroBannerConverter();
    }

    internal class IllustrationConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Illustration) || t == typeof(Illustration?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new Illustration { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new Illustration { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
            }
            throw new Exception("Cannot unmarshal type Illustration");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Illustration)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            throw new Exception("Cannot marshal type Illustration");
        }

        public static readonly IllustrationConverter Singleton = new IllustrationConverter();
    }

    internal class ObtainedFromConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ObtainedFrom) || t == typeof(ObtainedFrom?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new ObtainedFrom { Integer = integerValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new ObtainedFrom { Bool = boolValue };
            }
            throw new Exception("Cannot unmarshal type ObtainedFrom");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ObtainedFrom)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            throw new Exception("Cannot marshal type ObtainedFrom");
        }

        public static readonly ObtainedFromConverter Singleton = new ObtainedFromConverter();
    }

    internal class StatPrioritiesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StatPriorities) || t == typeof(StatPriorities?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new StatPriorities { Bool = boolValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<StatPriority[]>(reader);
                    return new StatPriorities { StatPriorityArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type StatPriorities");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (StatPriorities)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.StatPriorityArray != null)
            {
                serializer.Serialize(writer, value.StatPriorityArray);
                return;
            }
            throw new Exception("Cannot marshal type StatPriorities");
        }

        public static readonly StatPrioritiesConverter Singleton = new StatPrioritiesConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "heroes")
            {
                return TypeEnum.Heroes;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Heroes)
            {
                serializer.Serialize(writer, "heroes");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
